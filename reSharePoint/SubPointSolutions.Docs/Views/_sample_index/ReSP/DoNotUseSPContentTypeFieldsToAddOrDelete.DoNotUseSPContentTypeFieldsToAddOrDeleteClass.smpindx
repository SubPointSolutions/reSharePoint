<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <IsMethod>false</IsMethod>
  <IsClass>true</IsClass>
  <Tags />
  <Title />
  <Description />
  <MethodBodyWithFunction>    
    public class DoNotUseSPContentTypeFieldsToAddOrDelete
    {
        [TestMethod]
        public void InappropriateSPContentTypeFieldsUsage(SPWeb web, string contentTypeName)
        {
            var ct = web.ContentTypes[contentTypeName];
            ct.Fields.Add("NewField", SPFieldType.Boolean, true);
        }

        [TestMethod]
        public void AppropriateAddingFields(SPContentType contentType, SPField field)
        {
            //Check if the Field reference does not exists already
            if (!contentType.Fields.ContainsField(field.Title))
            {
                contentType.FieldLinks.Add(new SPFieldLink(field));
                contentType.Update();
            }
            else
            {
                //Do Nothing
            }
        }

        [TestMethod]
        public void AppropriateDeletingFields(SPContentType contentType, SPField field)
        {
            //Check if the Field reference exists
            if (contentType.Fields.ContainsField(field.Title))
            {
                contentType.FieldLinks.Delete(field.Title);
                contentType.Update();
            }
            else
            {
                //Do Nothing
            }
        }
    }</MethodBodyWithFunction>
  <MethodBody>public class DoNotUseSPContentTypeFieldsToAddOrDelete
{
    [TestMethod]
    public void InappropriateSPContentTypeFieldsUsage(SPWeb web, string contentTypeName)
    {
        var ct = web.ContentTypes[contentTypeName];
        ct.Fields.Add("NewField", SPFieldType.Boolean, true);
    }

    [TestMethod]
    public void AppropriateAddingFields(SPContentType contentType, SPField field)
    {
        //Check if the Field reference does not exists already
        if (!contentType.Fields.ContainsField(field.Title))
        {
            contentType.FieldLinks.Add(new SPFieldLink(field));
            contentType.Update();
        }
        else
        {
            //Do Nothing
        }
    }

    [TestMethod]
    public void AppropriateDeletingFields(SPContentType contentType, SPField field)
    {
        //Check if the Field reference exists
        if (contentType.Fields.ContainsField(field.Title))
        {
            contentType.FieldLinks.Delete(field.Title);
            contentType.Update();
        }
        else
        {
            //Do Nothing
        }
    }
}
</MethodBody>
  <Language>cs</Language>
  <Namespace>ReSharePoint.Docs.Basic.Inspection.Code</Namespace>
  <ClassName>DoNotUseSPContentTypeFieldsToAddOrDelete</ClassName>
  <MethodName>DoNotUseSPContentTypeFieldsToAddOrDeleteClass</MethodName>
  <ClassComment />
  <MethodFullName>ClassDoNotUseSPContentTypeFieldsToAddOrDeleteClass</MethodFullName>
  <ClassFullName>ReSharePoint.Docs.Basic.Inspection.Code.DoNotUseSPContentTypeFieldsToAddOrDelete</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>DoNotUseSPContentTypeFieldsToAddOrDelete.cs</SourceFileName>
  <SourceFileNameWithoutExtension>DoNotUseSPContentTypeFieldsToAddOrDelete</SourceFileNameWithoutExtension>
  <SourceFileFolder>E:\_sps_git\reSharePoint\reSharePoint\SubPointSolutions.Docs\Views\ReSP\Inspections\csharp</SourceFileFolder>
  <SourceFilePath>E:\_sps_git\reSharePoint\reSharePoint\SubPointSolutions.Docs\Views\ReSP\Inspections\csharp\DoNotUseSPContentTypeFieldsToAddOrDelete.cs</SourceFilePath>
</DocSample>